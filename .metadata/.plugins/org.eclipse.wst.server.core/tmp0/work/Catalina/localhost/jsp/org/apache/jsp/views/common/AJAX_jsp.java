/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.99
 * Generated at: 2024-03-22 02:54:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class AJAX_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("   \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>AJAX.jsp</title>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	<h1>AJAX</h1>\r\n");
      out.write("	\r\n");
      out.write("	<pre>\r\n");
      out.write("		Asynchronous JavaScript And XML의 약자로<br>\r\n");
      out.write("		서버로부터 데이터를 가져와서 전체 페이지를 다시 만드는 것이 아니라 일부만 내용물을 바꿀 수 있는 기법<br>\r\n");
      out.write("		\r\n");
      out.write("		참고로, 우리가 그동안 a태그 / form태그를 이용해서 요청한 방식은 동기식 요청 <br>\r\n");
      out.write("		=> 응답페이지가 돌아오고 전체 화면을 렌더링을 해야 결과를 확인할 수 있었음 <br>\r\n");
      out.write("		\r\n");
      out.write("		비동기 처리를 위해서는 우리가 AJAX라는 기술을 사용해야함! <br><br>\r\n");
      out.write("		\r\n");
      out.write("		* AJAX를 구현 방식 : JavaScript / JQuery / fetchAPI / axios...\r\n");
      out.write("		\r\n");
      out.write("		* 동기식 / 비동기식 요청 차이 <br>\r\n");
      out.write("		- 동기식 : 요청 처리 후 응답 HTML데이터가 돌아와야만 그 다음 작업이 가능 <br>\r\n");
      out.write("				만약 서버에서 응답페이지를 돌려주는 시간이 지연되면 무작정 기다리고 있어야함 <br>\r\n");
      out.write("				전체 화면이 새로고침 <br><br>\r\n");
      out.write("\r\n");
      out.write("		- 비동기식 : 현재 페이지를 그대로 유지하면서 중간중간에 추가요청을 보낼 수 있음 <br>\r\n");
      out.write("				 요청을 보낸다고 해서 다른 페이지로 이동하는것이 아님 (현재 페이지가 그대로 유지) <br>\r\n");
      out.write("				 요청을 보내놓고 응답이 돌아올때까지 다른작업을 할 수 있음 <br><br>\r\n");
      out.write("		\r\n");
      out.write("		예) 예약, 중복확인, 검색어 자동완성 <br><br>\r\n");
      out.write("		\r\n");
      out.write("		* 비동기식 단점 <br>\r\n");
      out.write("		- 페이지 내 복잡도가 기하급수적으로 증가 => 에러 발생 시 디버깅이 어려움 <br>\r\n");
      out.write("		- 요청 후 돌아온 응답데이터를 가지고 현재 페이지에서 새로운 요소를 동적으로 만들어서 뿌려줘야함\r\n");
      out.write("		=> DOM요소를 새롭게 만드는 구문을 잘 익혀둬야함<br><br>\r\n");
      out.write("		\r\n");
      out.write("		* JQuery에서의 AJAX통식\r\n");
      out.write("		\r\n");
      out.write("		[ 표현식 ]\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			속성명 : 속성값,\r\n");
      out.write("			속성명 : 속성값,\r\n");
      out.write("			속성명 : 속성값,\r\n");
      out.write("			...\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		* 주요 속성\r\n");
      out.write("		- url : 요청할 url(필수로작성) => form태그의 action속성\r\n");
      out.write("		- type : 요청 전송 방식(GET/POST 등등.. 생략 시 기본값은 get) => form태그의 method속성\r\n");
      out.write("		- date : 요청 시 전달한 값 ({ 키:밸류, 키:밸류 }) => form태그의 input요소의 value속성 같은것\r\n");
      out.write("		- success : AJAX통신 성공 시 콜백함수를 정의\r\n");
      out.write("		\r\n");
      out.write("		- error : AJAX통신 실패 시 콜백 함수를 정의\r\n");
      out.write("		- complete : AJAX통신 성공하든 실패하든 무조건 끝나면 실행할 콜백함수\r\n");
      out.write("		- async : 서버와 비동기 처리 방식 설정 여부 (기본값 true)\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h1>JQuery 방식을 이용한 AJAX테스트</h1>\r\n");
      out.write("	\r\n");
      out.write("	<h3>1. 버튼 클릭 시 GET방식으로 서버에 데이터 전송 및 응답</h3>\r\n");
      out.write("	\r\n");
      out.write("	입력 : <input id=\"input1\" type=\"text\" />\r\n");
      out.write("	<button id=\"btn1\" >요청 버튼</button>\r\n");
      out.write("	\r\n");
      out.write("	<br> \r\n");
      out.write("	\r\n");
      out.write("	응답 : <label id=\"result1\">현재 응답 없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		$('#btn1').click(function(){\r\n");
      out.write("			// console.log('click');\r\n");
      out.write("			// 동기식 요청 : location.href = '요청 url?쿼리스트링';\r\n");
      out.write("			\r\n");
      out.write("			// 비동기식 처리\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : 'jqAjax1.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					input: $('#input1').val()\r\n");
      out.write("				},\r\n");
      out.write("				type : 'get',\r\n");
      out.write("				success: function(result){\r\n");
      out.write("					// console.log('성공');\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					$('#result1').text(result);\r\n");
      out.write("				},\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<h3>2. Post방식으로 서버에 요청 및 응답</h3>\r\n");
      out.write("	\r\n");
      out.write("	숫자 1: <input type=\"text\" id=\"input2_1\"><br>\r\n");
      out.write("	숫자 2: <input type=\"number\" id=\"input2_2\"><br>\r\n");
      out.write("	<button onclick=\"ajaxTest2()\">AJAX요청</button>\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	응답 : <label id=\"result2\" >현재 응답 없음</label>\r\n");
      out.write("	응답 : <label id=\"result2_2\" >현재 응답 없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function ajaxTest2(){\r\n");
      out.write("			// console.log(typeof($('#input2_1').val()));\r\n");
      out.write("			// console.log(typeof($('#input2_2').val()));\r\n");
      out.write("			// console.log(typeof([]));\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : 'jqAjax2.do',\r\n");
      out.write("				type: 'post',\r\n");
      out.write("				data:{\r\n");
      out.write("					number1 : $('#input2_1').val(),\r\n");
      out.write("					number2 : $('#input2_2').val()\r\n");
      out.write("				},\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					$('#result2').html('<span style=\"color:red\">' + result['number1'] + \"</span>\");\r\n");
      out.write("					$('#result2_2').html('<span style=\"color:orange\">' + result[\"number2\"] + \"</span>\");\r\n");
      out.write("				},\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h3>3. 객체를 응답데이터로 받아보기</h3>\r\n");
      out.write("	\r\n");
      out.write("	게시글 번호 입력 : <input type=\"text\" id=\"input3\" >\r\n");
      out.write("	<button onclick=\"test3()\">조회</button>\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"output3\">\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<table id=\"output4\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>게시글 번호</th>\r\n");
      out.write("				<th>게시글 제목</th>\r\n");
      out.write("				<th>게시글 내용</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");
      out.write("			\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function test3(){\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : 'jqAjax3.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					boardNo : $('#input3').val()\r\n");
      out.write("				},\r\n");
      out.write("				type: 'get',\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					/*\r\n");
      out.write("					const resultStr = '게시글 번호 : ' + result.boardTitle + '<br>'\r\n");
      out.write("								    + '게시글 내용 : ' + result.boardContent + '<br>'		\r\n");
      out.write("									+ '조회수 : ' + result.count + '<br>';\r\n");
      out.write("									*/\r\n");
      out.write("					// $('#output3').html(resultStr);\r\n");
      out.write("									\r\n");
      out.write("					let resultStr = '';\r\n");
      out.write("					\r\n");
      out.write("					for(let i = 0; i < result.length; i++){\r\n");
      out.write("						resultStr += '<tr>'\r\n");
      out.write("									  + '<td>' + result[i].boardNo + '</td>'\r\n");
      out.write("									  + '<td>' + result[i].boardTitle + '</td>'\r\n");
      out.write("									  + '<td>' + result[i].boardContent+ '</td>'\r\n");
      out.write("								  + '</tr>';\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					$('#output4 tbody').html(resultStr);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
