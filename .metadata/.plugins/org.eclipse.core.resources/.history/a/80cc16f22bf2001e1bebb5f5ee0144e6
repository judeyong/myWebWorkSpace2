<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h1>JSTL Core Library</h1>
	
	<h3>1. 변수(속성 == Attribute)</h3>

	<pre>
		* 변수 선언 (&lt; c:set var="변수명" value="리터럴값" scope="스코프영역지정(생략가능)"/&gt;)
		- 속성을 선언하고 초기값을 대입할 수 있는 태그
		- 더 나아가서 어떤 scope영역에 담아둘건지 지정 가능함(생략 시 pageScope에 담김)
		
		=> 해당 scope영역에 setAttribute라는 메소드를 이용해서 key+ value형태로 데이터를 담아둔다 라고 생각하면 됨
		=> set태그를 통해 선언된 속성 같은 경우 EL 구문으로 접근해서 사용가능(스크립팅 요소를 접근 불가능)
		
		* 주의사항
		- 타입을 별도로 지정하지 않음
		- 반드시! *해당 속성에 담아두고자하는 값(value속성에 담긴 리터럴)을 무조건 세팅해야함!
		(초기값을 반드시 넣어줘야함 선언과 동시에 초기화)
	</pre>
	
	<c:set var="num1" value="10" /> <!-- pageScope에 담김 pageContext.setAttribute("num1", "10"); -->
	<c:set var="num2" value="20" scope="request" /> <!--requestScope에 담김 request.setAttribute("num2", "20"); --> 
	
	num1의 값 : ${ num1 } <br>
	num2의 값 : ${ num2 } <br>
	
	<c:set var="result" value="${ num1 + num2}" scope="session" /> <!-- sessionScope에 담김 -->
	
	result 값 : ${ result }<br>
	
	<!--
		EL 구문을 사용할 때 속성명만 제시하면 공유범위가 작은곳에서 부터 찾게됨
		: 티가 나지는 않지만 찾아가는것에 대한 시간이 걸림(스코프영역.속성명) 
		
	-->
	${ pageScope.num1 } <br>
	${ requestScope.num2 } <br>
	${ sessionScope.result } <br>
	
	<c:set var="result" scope="request">9999</c:set><br>
	<!-- value 속성말고 시작태그와 종료태그 사이에도 대입할 값을 기술 할 수 있음 -->
	${ requestScope.result }
	${ sessionScope.result }
	
	<hr>
	
	<pre>
		* 속성 삭제(&lt;c:remove var="제거하고자하는 속성명" scope="스코프영역지정(생략가능)"/&gt;)
		- 해당 속성을 scope영역에서 제거하는 태그
		- scope지정 생략 시 모든 scope에서 해당 속성을 다 찾아서 제거함
		=> 즉, removeAttribute("키값"); 메소드를 이용해서 제거하는 것과 동일하게 동작함
	</pre>
	
	삭제 전 result : ${ result }<br>
	
	1) requestScope에서 result속성을 삭제 <br>
	<c:remove var="result" scope="request" />
	request에서 삭제후 result : ${ result } <br>
	
	2) 모든 scope에서 삭제 <br>
	<c:remove var="result"/>
	모든 scope에서 삭제후 result : ${ result }<br>
	
	<hr>
	
	<pre>
		* 속성 출력 (&lt;c:out value="출력하려고 하는 값" excapeXml="true(기본값, 생략가능)" /&gt;)
		- 데이터를 출력하고 할 때 사용하는 태그
		- default : 기본값, value속성에 출력하고자 하는 값이 없을 경우 대체해서 기본값으로 출력할 내용물을 작성할 수 있음(생략가능)
	</pre>
	
	num1을 출력 ! : <c:out value="${ num1 }" /><br>
	num1을 EL 구문으로 출력 : ${ num1 }<br>
	
	<br>
	result를 EL를 출력 : ${ result }<br>
	result를 out태그로 출력 : <c:out value="${ result }" default="값이 존재 하지 않음" /> <br><br>
	
	<c:set var="outTest" value="<b>출력테스트</b>" />
	
	EL 구문을 이용해서 HTML요소 출력 : ${ outTest } <br>
	out태그를 이용해서 HTML요소 출력 : <c:out value="${ outTest }" /><br>  
	<!-- escapeXml생략 시 기본값은 true이고, HTML태그가 해석되지 않고 단순 문자열로 취급함 -->
	
	<hr>
	
	<h3>2. 조건문 - if(&lt;c:if test="조건식"&gt; 조건식이 true일 경우 실행할 내용문 &lt;/c:if&gt;)</h3>
	
	<pre>
		- JAVA의 단일 if문과 비슷한 역할을 하는 태그
		- 조건식은 test라는 속성에 작성(******* 조건식을 만들 때 반드시 !!EL구문으로 작성해야함!!)
	</pre>
	
	<%
		// 가정 -- 서블릿에서 일어난 일
		request.setAttribute("value1", 100);
		request.setAttribute("value2", 200);
		
		// 01_core.jsp로 포워딩
		
		
	%>
	
	<%--
	<% if(value1 > value2){ %>
		어쩌고 저쩌구 함
	<%} %>
	 --%>
	
	<c:if test="${ value1 gt value2 }">
		<b>value1이 value2보다 큽니다.</b><br>
	</c:if>
	
	<c:if test="${ value1 le value2 }">
		<b>value1이 value2보다 작거나 같습니다.</b>
	</c:if>
	
	<br>
	
	<c:set var="str" value="안녕하세요" />
	<%--
	<%if(str.equals("안녕하세요")) {%>
		어쩌고 저쩌고
	<%} %>
	--%>
	
	<c:if test="${ str eq '안녕하세요' }">
		<mark>Hello World!</mark><br>
	</c:if>
	
	<h3>3. 조건문 - choose, when, otherwise</h3>
	
	<pre>
		[ 표현법 ]
		&lt; c:choose &gt;
			&lt;c:when test="조건1"&gt; ~~~ &lt;/c:when &gt;
			&lt;c:when test="조건2"&gt; ~~~ &lt;/c:when &gt;
			...
			&lt;c:otherwise &gt; ~~~ &lt;/c:otherwise &gt;
		&lt;/c:choose &gt;
		
		- JAVA의 if-else문, switch문과 비슷한 역할을 하는 태그
		- 각 조건들은 c:choose의 하위요소로 c:when을 통해서 작성
		- otherwise에는 조건을 적어주지 않음
	</pre>
	<%--
	<%if(조건1){ %>
		~~~~
	<%} else if(조건2) { %>
		~~~~
	<%} else if(조건3) { %>
		~~~~
	<%} else { %>
		~~~~
	<%} %>
	 --%>
	
	<c:choose>
		<c:when test="${value1 eq 100 }"> <!-- if블럭 -->
			<b>안녕하세요.</b>
		</c:when>
		<c:when test="${ value2 eq 300 }"> <!-- else if -->
			<b>반갑습니다.</b>
		</c:when>
		<c:otherwise>
			<b>안녕히가세요.</b>
		</c:otherwise>
	</c:choose>
	<!-- c:choose안에는 when/otherwise말고 다른 내용이 들어가선 절대로 안됨! -->
	
	<br>
	<hr>
	
	<h3>4. 반복문 - forEach</h3>
	
	<pre>
		[ 표현법 ]
		for loop문
		&lt;c:forEach var="속성명" begin="초기값" end="끝값" step="증가시킬값(생략가능)"&gt;
			반복적으로 실행할 내용
		&lt;/c:forEach&gt;
		
		=> step 생략시 기본값이 1(step="1")
			
		향상된 for문
		&lt;c:forEach var="속성명" items="순차적으로접근할배열또는컬렉션" [varStatus="현재접근된요소의상태값을저장할속성"]&gt;
			반복적으로 실행할 내용
		&lt;/c:forEach&gt;
		
		var속성으로 선언된 제어변수에 접근하고자 할 때는 반드시 EL구문으로 접근해야함!
	</pre>
	
	<!-- for문 -->
	<% for(int i = 1; i <= 10; i++) {%>
		<%= i %>
	<%} %>
	
	<br>
	
	
	<c:forEach var="i" begin="1" end="10">
		${ i }
	</c:forEach>
	<br>
	<c:forEach var="i" begin="1" end="10" step="3" >
		${ i }
	</c:forEach>
	<br>
	<c:forEach var="i" begin="1" end="6">
		<h${ i }>태그 안에도 적용이 가능</h${ i }>
	</c:forEach>
	<br>
	
	<c:set var="colors">
		red, orangered, orange, yellow, yellowgreen, greenyellow, forestgreen
	</c:set><!-- 배열처럼 사용 가능 -->
	color 값: ${ colors }
	
	<ul>
		<c:forEach var="c" items="${ colors }">
			<li style="color:${ c }">${ c }</li>
		</c:forEach>
	</ul>
	
	<br>
	
	
	<!-- 응용 -->
	<%@ page import="java.util.ArrayList, com.kh.model.vo.Person" %>
	<%
		// 가정 -- 요기는 서블릿 영역
		// 요청을 받아서 DB에가서 Person들을 조회
		ArrayList<Person> list = new ArrayList();
		list.add(new Person("홍길동", 15, "한양"));
		list.add(new Person("콩취", 16, "경기도"));
		list.add(new Person("팥취", 17, "제주도"));
		
		request.setAttribute("personList", list);
		
		//request.getRequestDispatcher("views/CustomAction/01_core.jsp").forward(request, response);
		// 여기까지가 서블릿에서 일어난 일
	%>
	
	<%
		
	%>
	
	<table border="1">
		<thead>
			<tr>
				<th>이름</th>
				<th>나이</th>
				<th>주소</th>
			</tr>
		</thead>
		<tbody>
			<c:choose>
				<c:when test="${ empty personList }">
					<tr>
						<td colspan="3">조회결과가 존재하지 않습니다.</td>
					</tr>
				</c:when>
				<c:otherwise>
					<c:forEach var="p" items="${ requestScope.personList }" varStatus="s">
						<tr>
							<td>${ p.name }</td>
							<td>${ p.age }</td>
							<td>${ p.address }</td>
							<td>${ s.index }</td>
							<!-- index : 0부터 시작 / count : 1부터 시작 -->
						</tr>
					</c:forEach>
				</c:otherwise>
			</c:choose>
		</tbody>
	</table>
	
	<h3>5. 반복문 - forTokens</h3>
	
	<pre>
		[ 표현법 ]
		&lt;c:forTokens var="각값을보관할속성명" items="분리하고자하는문자열" delims="구분자"&gt;
			반복적으로 실행할 문구(출력만)
		&lt;/c:forTokens&gt;
		
		- JAVA의 split('구분자') 또는 StringTokenizer와 비슷한 역할
		- 구분자를 통해서 분리된 각각의 문자열에 순차적으로 접근하면서 반복 수행	
	</pre>
	
	<!-- 테스트할 값 -->
	<c:set var="device" value="컴퓨터,휴대폰,TV,에어컨/냉장고.세탁기" ></c:set>
	
	<ul>
		<c:forTokens var="d" items="${ device }" delims=",./">
			<li>${ d }</li>
		</c:forTokens>
	</ul>
	
	<hr>
	
	<h3>6. 쿼리스트링 관련 태그 - url, param</h3>
	
	<pre>
		[ 표현법 ]
		&lt; c:url var="속성명" value="요청url" &gt;
			&lt;c:param name="키값" value="밸류값"/&gt;
			...
		&lt;/c:url&gt;	
	</pre>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</body>
</html>